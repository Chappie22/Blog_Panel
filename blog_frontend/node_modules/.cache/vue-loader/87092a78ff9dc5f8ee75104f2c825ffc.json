{"remainingRequest":"C:\\Users\\Админ\\Desktop\\blog_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Админ\\Desktop\\blog_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Админ\\Desktop\\blog_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Админ\\Desktop\\blog_frontend\\src\\components\\post.vue?vue&type=template&id=0148dea0&","dependencies":[{"path":"C:\\Users\\Админ\\Desktop\\blog_frontend\\src\\components\\post.vue","mtime":1621956150569},{"path":"C:\\Users\\Админ\\Desktop\\blog_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Админ\\Desktop\\blog_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Админ\\Desktop\\blog_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Админ\\Desktop\\blog_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}